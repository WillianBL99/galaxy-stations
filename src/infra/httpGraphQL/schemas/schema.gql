type Message {
    message: String!
}

input PaginationArgs {
    page: Int = -1
    offset: Int = 10
}

# User

input RegisterArgs {
    name: String!
    email: String!
    password: String!
}

input LoginArgs {
    email: String!
    password: String!
}

type UserLogin {
    name: String!
    email: String!
}

type AuthPayload {
    token: String!
    user: UserLogin!
}

type User {
    id: ID!
    name: String!
    email: String!
    checkedAt: String!
    createdAt: String!
    updatedAt: String
}

# Planet

type Planet {
    id: ID!
    name: String!
    mass: Float!
    hasStation: Boolean!
    checkedAt: String!
    createdAt: String!
    updatedAt: String
    stations: [Station!]!
}

# Station

input InstallStationArgs {
    name: String!
    planet: String!
}

type Station {
    id: ID!,
    name: String!,
    charging: Boolean!
    planetId: String!
    createdAt: String!
    updatedAt: String
    # planet: Planet!
}

type StationHistory {
    startTime: String!,
    duration: String!,
    userId: String!,
    user: User!
}

# Recharge

input RechargeArgs {
    stationId: String
    endTime: String
    reservationId: String
}

enum RechargeStatus {
    reserved
    charging
    done
}

type Recharge {
    id: ID!
    startTime: String!
    endTime: String!
    pricePerMinute: Float!
    status: RechargeStatus!
    userId: String!
    stationId: String!
    createdAt: String!
    updatedAt: String
}

type Reservation {
    reservationId: String
}

input ReservationArgs {
    stationId: String!
    userId: String!
    startTime: String!
    endTime: String!
}

# Queries

type Query {
    suitablePlanets(pagination: PaginationArgs ): [Planet!]!
    stations(pagination: PaginationArgs ): [Station!]!
    stationHistory(pagination: PaginationArgs, stationId: String!): [StationHistory!]!
}

# Mutations

type Mutation {
    installStation(input: InstallStationArgs): Station!
    recharge(input: RechargeArgs): Message!
    register(input: RegisterArgs): User
    login(input: LoginArgs): AuthPayload!
    reservation(input: ReservationArgs): Reservation!
}