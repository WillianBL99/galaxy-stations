
input PaginationArgs {
    page: Int = -1
    offset: Int = 10
}

input RegisterArgs {
    name: String!
    email: String!
    password: String!
}

type User {
    id: ID!
    name: String!
    email: String!
    password: String!
    checkedAt: String!
    createdAt: String!
    updatedAt: String
}

type Planet {
    id: ID!
    name: String!
    mass: Float!
    hasStation: Boolean!
    checkedAt: String!
    createdAt: String!
    updatedAt: String
}

input InstallStationArgs {
    name: String!
    planet: String!
}

type Station {
    id: ID!,
    name: String!,
    charging: Boolean!
    planetId: String!
    createdAt: String!
    updatedAt: String
    planet: Planet!
}

# type StationHistory {
#     time: String,
#     duration: String,
#     user: User!
# }

input RechargeArgs {
    stationId: String!
    endTime: String!
}

enum RechargeStatus {
    RESERVED
    CHARGING
    DONE
}

type Recharge {
    id: ID!
    startTime: String!
    endTime: String!
    pricePerMinute: Float!
    status: RechargeStatus!
    userId: String!
    stationId: String!
    createdAt: String!
    updatedAt: String
}

type Query {
    suitablePlanets(pagination: PaginationArgs ): [Planet!]!
    stations(pagination: PaginationArgs ): [Station!]!
    # stationHistory: Station!
}

# type Reservation {
#     reservationId: String
# }

# input ReservationArgs {
#     stationId: String!
#     userId: String!
#     startTime: String!
#     endTime: String!
# }

type Mutation {
    installStation(input: InstallStationArgs): Station!
    recharge(input: RechargeArgs): Recharge!
    register(input: RegisterArgs): User
    # login(email: String!, password: String!): AuthPayload!
    # reservation(input: ReservationArgs): ReservationId 
}